#!/usr/bin/php
<?php
$f = getcwd();

if($command = param(1)){
    if($command == '-v' || $command == '--version'){
        echo <<<'END'

 _____                    .-..-.
|  __ \                   | || |
| |__) | .---.  .---.  .-.| || | .---.
|  ___/ /  _  \/  _  \/  _  || |/  __ \
| |     | |_| || |_| || |_| || || |___/
|_|     \_____/\_____/\_____||_|\_____) (v1.1.0)

CLI Tool for Moodle Plugin development.

END;

        exit(0);
    }
    /**
     * 'init' command.
     */
    if($command == 'init'){

        if(file_exists($f . '/version.php')){
            echo 'Fatal: A plugin already exists in this folder.';
            exit(1);
        }

        $type 			 = param(2);
        $pluginname 	 = param(3);
        $exhibition_name = param(4);

        if(!$type){
            echo 'Fatal: Your plugin must specify a type.';
            exit(1);
        }

        if(!$pluginname){
            echo 'Fatal: Your plugin must have a name.';
            exit(1);
        }

        $component_name = $type . '_' . $pluginname;


        $exhibition_name = $exhibition_name ? $exhibition_name : $component_name;

        $author = readline('Enter your name: ');
        $email  = readline('Enter your e-mail:');

        // NOTE Poodle php
        // NOTE poodle.json was replaced by a PHP serialized file
        $php_file = fopen('poodle.php','w');
        fwrite($php_file,serialize([
            'author' => [
                'name' => $author,
                'email' => $email,
            ],
            'component_name' => $component_name

        ]));
        fclose($php_file);

        // NOTE version.php file
        $file = fopen('version.php', 'w');
        $current_year = date('Y');
        $version_str = "<?php
/**
 * @package     $component_name
 * @copyright   $current_year, $author <$email>
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

defined('MOODLE_INTERNAL') || die();

";
        $version_str .= '$plugin->version   = ' . date('Y') . date('m') . date('d') . '00' . ";\n";
        $version_str .= '$plugin->requires  = 2019021500' . ";\n";
        $version_str .= '$plugin->cron      = 0' . ";\n";
        $version_str .= '$plugin->component = ' . "'$component_name'" . ";\n";
        $version_str .= '$plugin->maturity  = MATURITY_ALPHA' . ";\n";
        $version_str .= '$plugin->release   = \'v0.0.1\'' . ";\n";

        fwrite($file, $version_str);
        fclose($file);

        mkdir($f . '/lang/en', 0777, true);
        $file = fopen($f . "/lang/en/$component_name.php",'w');

        $lang_str = '<?php
$string[\'pluginname\'] = ' . "'$exhibition_name'" . ";";
        fwrite($file, $lang_str);
        fclose($file);
        // end of version.php

        mkdir($f . '/db');

        // NOTE upgrade.php file
        $file = fopen($f . '/db/upgrade.php','w');
        $upgrade_str = "<?php
/**
 * $component_name plugin upgrade code.
 *
 * @package     $component_name
 * @copyright   $current_year, $author <$email>
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
defined('MOODLE_INTERNAL') || die;

function xmldb_".$component_name."_upgrade(\$oldversion) {
    global \$DB;

    return true;
}";
        fwrite($file, $upgrade_str);
        fclose($file);
        // end of upgrade.php file

        fopen($f . '/db/access.php','w');

        // NOTE install.php file
        $file = fopen($f . '/db/install.php','w');
        $isntal_str = "<?php
/**
 * Post installation and migration code.
 *
 * @package     $component_name
 * @copyright   $current_year, $author <$email>
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
defined('MOODLE_INTERNAL') || die;

function xmldb_".$component_name."_install() {
    global \$DB;
}";
        fwrite($file, $isntal_str);
        fclose($file);
        // end of install.php file


        fopen($f . '/db/uninstall.php','w');

        $file = fopen($f . '/db/tasks.php','w');
        fwrite($file, "<?php
\$tasks = [

];");
        fclose($file);

        fopen($f . '/db/events.php','w');
        fopen($f . '/db/messages.php','w');
        fopen($f . '/db/services.php','w');
        fopen($f . '/db/renamedclasses.php','w');

        mkdir($f . '/classes', 0777);
        mkdir($f . '/classes/task', 0777);
        mkdir($f . '/cli', 0777);

        fopen($f . '/settings.php', 'w');
        fopen($f . '/readme_moodle.txt', 'w');
        // fopen($f . '/README.md', 'w');

        $file = fopen($f . '/index.php', 'w');
        fwrite($file, "<?php
require_once('../../config.php');
\$renderer = \$PAGE->get_renderer('$component_name');

\$url    = new moodle_url('/$type/$pluginname/index.php');
\$urlstr = \$url->out(false);

\$context = context_system::instance();
\$PAGE->set_context(\$context);

\$PAGE->set_pagelayout('admin');
\$PAGE->set_url(\$urlstr);
\$PAGE->set_title(get_string('pluginname', '$component_name'));
\$PAGE->set_heading(get_string('pluginname', '$component_name'));

\$PAGE->requires->jquery();

print \$OUTPUT->header();
print \$renderer->render_index();
print \$OUTPUT->footer();
?>");
        fclose($file);

        $file = fopen($f . '/externallib.php','w');
        fwrite($file, "<?php
require_once \"\$CFG->libdir/externallib.php\";

class ".$component_name."_external extends external_api
{
    public function index_parameters()
    {
        return new external_function_parameters([
            'id' => new external_value(PARAM_INT,
                'Parameter description for this external function.',
                VALUE_REQUIRED,
                0),
        ]);
    }

    public static function index(\$id)
    {
        global \$CFG;

        return null;
    }

    public function index_returns()
    {
        return new external_multiple_structure(
            new external_single_structure([
                'response' => new external_value(PARAM_RAW,
                    'Response description for this external function.'),
                ])
            );
    }
}
");
        fclose($file);

        echo 'Message: Moodle plugin successfully created.';

        exit(0);
    }

    /**
     * Language commands group.
     */
    if($command == 'lang'){
        $op = param(2);

        isAPlugin();

        if($op == ''){
            echo 'Fatal: You must specify an operation.';
            exit(1);
        }

        // NOTE Add a new language folder and string file copied from en.
        if($op == 'add'){
            $configFile = getConfigFile();
            extract($configFile);

            $lang_str = file_get_contents($f . '/lang/en/' . $component_name . '.php');

            $language = param(3);

            if($language == ''){
                echo 'Fatal: You must specify a language.';
                exit(1);
            }

            if(!file_exists($f . "/lang/$language"))
                mkdir($f . "/lang/$language");

            if(!file_exists($f . "/lang/$language/" . $component_name . '.php'))
                $file = fopen($f . "/lang/$language/" . $component_name . '.php','w');
            else
                $file = fopen($f . "/lang/$language/" . $component_name . '.php','+w');

            fwrite($file, $lang_str);
            fclose($file);

            echo 'Message: Language string file successfully created.';

            exit(0);
        }
    }

    // NOTE Add a language string.
    if($command == 'str'){
        $configFile = getConfigFile();
        extract($configFile);

        if($op = param(2)){
            if($op == 'add'){
                if($key = param(3)){
                    $key = preg_replace('/\s+/', '', $key);
                    // $key = strtolower($key);
                    $value = param(4);

                    add_locale_string($key, $value);

                    echo "Message: New string key \"$key\" added to locale files.";
                    exit(0);

                }else{
                    echo 'Fatal: You must specify a key value for your locale string.';
                    exit(1);
                }
            }

            /**
             * Insert new options for str command here
             * all options must end in an exit function
             * passing 1 for error 0 for success.
             *
             * If no matching option is passed
             * code will exit with error.
             */

            echo "Fatal: Unknown option \"$op\" for command str.";
            exit(1);
        }else{
            echo 'Fatal: You must specify an operation.';
            exit(1);
        }
    }

    // NOTE Add a scheduled task.
    if($command == 'task'){
        $configFile     = getConfigFile();
        extract($configFile);

        if($op = param(2)){
            if($op == 'add'){
                $taskname = param(3);

                if($taskname == ''){
                    echo 'Fatal: You must specify a task name.';
                    exit(1);
                }

                if(!file_exists($f . '/classes')){
                    mkdir($f . '/classes');
                }

                if(!file_exists($f . '/classes/task')){
                    mkdir($f . '/classes/task');
                }

                if(!file_exists($f . '/db/tasks.php')){
                    mkdir($f . '/db/tasks.php');
                }

                $taskname 			= preg_replace('/\s+/', '', $taskname);
                $taskname_str_key 	= $taskname . '_task';

                $task_class_str = "<?php
namespace $component_name\\task;

/**
 * This a scheduled task.
 */
class $taskname extends \\core\\task\\scheduled_task {

    /**
     * Return the task's name as shown in admin screens.
     *
     * @return string
     */
    public function get_name() {
        return get_string('$taskname_str_key', '$component_name');
    }

    /**
     * Execute the task.
     */
    public function execute() {
        //TO-DO: Implements task logic here.
    }
}";

                $file = fopen($f . "/classes/task/$taskname.php", 'w');
                fwrite($file, $task_class_str);
                fclose($file);

                add_locale_string($taskname_str_key, $taskname . ' scheduled task');

                $db_task_str = file_get_contents($f . '/db/tasks.php');
                $new_task_str = "	[
        'classname' 	=> '$component_name\\task\\$taskname',
        'blocking' 		=> 0,
        'minute' 		=> '*/5', // Every five minutes
        'hour' 			=> '*',   // of any hour
        'day' 			=> '*',   // of any day
        'month' 		=> '*',   // at any month
        'dayofweek' 	=> '*',   // at any day of week
    ],
";
                $db_task_str = preg_replace('/(\<\?php)(.*)(];)/sm', "$1$2$new_task_str$3", $db_task_str);
                $file = fopen($f . '/db/tasks.php','w');
                fwrite($file, $db_task_str);
                fclose($file);


                echo 'Message: Scheduled task class successfully added.';
                exit(0);
            }

            echo "Fatal: Unknown option \"$op\" for command str.";
            exit(1);
        }else{
            echo 'Fatal: You must specify an operation.';
            exit(1);
        }
    }

    if($command == 'test'){
        test();
    }
}

if($command == 'help'){
    showHelpList();
}
/**
 * Test function
 * Test not implemented yet features here
 * before putting them live to production code
 */
function test(){
    // $json = getConfigFile();

    echo ':D.';
    exit(0);
}

/**
 * Raises a fatal error if this folder is not a Moodle plugin
 */
function isAPlugin()
{
    global $f;
    if(!file_exists($f . '/version.php')){
        echo 'Fatal: Not a Moodle plugin.';
        exit(1);
    }
}

/**
 * Raises a fatal error if there is no poodle.php file in folder
 * or returns a associative array based on its contents
 */
function getConfigFile()
{
    global $f;
    if(!file_exists($f . '/poodle.php')){
        echo 'Fatal: poodle.php is missing.';
        exit(1);
    }

    return unserialize(file_get_contents($f . '/poodle.php'));

}

/**
 * Retrieves a param from command line or empty if not passed
 */
function param($index = 0)
{
    global $argv;
    return isset($argv[$index]) ? $argv[$index] : '';
}

/**
 * Adds a string key to locale files
 */
function add_locale_string($key, $value='')
{
    global $f;
    $configFile = getConfigFile();
    extract($configFile);

    $folders = scandir($f . '/lang');

    foreach($folders as $folder){
        if($folder == '.') continue;
        if($folder == '..') continue;

        $lang_file_name = $f . "/lang/$folder/$component_name.php";
        $lang_str = file_get_contents($lang_file_name);


        $file = fopen($lang_file_name,'w');
        fwrite($file, $lang_str . "\n\$string['$key'] = '$value';");
        fclose($file);
    }

    return true;
}

/**
 * Show List of available commands
 */
function showHelpList()
{
    // new plugin
    echo "\n\r";
    echo "\033[31m To create a new plugin run: \033[0m" . PHP_EOL;
    echo "\t-- php poodle init <type> <name> <'Exhibition name'>\n\r";
    echo "\n\r";

    // locale files and folders
    echo "\033[31m To create locale files and folders run: \033[0m" . PHP_EOL;
    echo "\t-- php poodle lang add <language>\n\r";
    echo "\n\r";

    // adding string to locale
    echo "\033[31m To add string keys to your locale run: \033[0m" . PHP_EOL;
    echo "\t-- php poodle str add <key> <value>\n\r";
    echo "\n\r";

    //  adding scheduled cron tasks
    echo "\033[31m To add scheduled cron tasks run: \033[0m" . PHP_EOL;
    echo "\t-- php poodle tasks add <task_name>\n\r";
    echo "\n\r";

}